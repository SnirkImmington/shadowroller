* Shadowroller Server "Architecture"

Shadowroller is split into three types of packages:
- ~sr~ is the base package which imports other pakcages and runs the servers.
- ~sr/roll~ contains logic for rolling dice and interpreting the results.
- ~sr/id~ contains identifier types
- ~sr/redis~ contains logic for using Redis.
- ~sr/config~ is used by other packages for configuration.
- ~sr/routes~ contains a REST API used by the frontend.
- ~main~ creates the HTTP server(s).

Given those descriptions, there are some import paths:
- ~config -> sr, routes~: config is used by all packages, may not import them.
- ~sr -> routes~: routes may import sr, not the other way around.
- ~sr, config -> main~: main uses exports from the rest of the program.

There are basic guidelines to keeping things well-architectured:
- ~rotues~ should not perform redis commands directly
- ~sr~ should not perform HTTP/request management
- ~config~ should do nothing besides get and verify config data
- ~main~ should call some functions from ~sr~ with minimal business logic

** ~sr~ package: business logic

Although Shadowroller is very small and doesn't do much, I'm trying to maintain
a reasonable amount of separation between this core package and ~routes~.

- ~session~: create sessions in Redis, check authorization per-request.
- ~game~: manage the players in a game
- ~event~: create events, subscribe to events
- ~events~: definition of event types and serialization
- ~roll~: roll dice according to Shadowrun rules
- ~update~: updates are streamed server->client when game state changes

- ~tid~: a timestamp ID with some noise, not currently used but will be in the future
- ~timestamp~: event IDs are currently milisecond timestamps
- ~id~: GUIDs using base64 encoded strings, used for players

** ~routes~ package: a REST API

This started as an idea to keep endpoint files in a folder, but turned into an API
boundary. Shadowroller may have alternate APIs in the future (i.e. a Discord bot)
so keeping the business/endpoint logic separate is a good investment.

This package includes the HTTP handlers for API endpoints + the Gorilla routers
they're registered on, and auxiliary files for creating the HTTP server.
It's definitely due for a split-up!

- ~httpServer~: methods for creating servers and ~mux~ es
- ~httpSession~: get session info from HTTP requests
- ~httpContext~: attach request IDs and other info to request ~Context~ s.
- ~httpError~: error shortcuts for bailing out of HTTP request handler
- ~middleware~: router middleware including rate limiting and panic catching.
- ~redirectServer~: Simple HTTP -> HTTPS redirect server which is mostly used by spammers
- ~request~: Generic, mixed HTTP request handler utilities, mostly logging.

- ~auth~: log in and refresh sessions
- ~game~: get info about games, perform actions (i.e. rolls) - will get split up
- ~task~: one-off tasks are registered as routes here, usually disabled
- ~meta~: frontend redirect, 404 handler, healthcheck, etc.



* Shadowroller Architecture

** Package list
**Packages for project structure**:
- ~sr~ contains the entrypoint and orchestration logic
- ~sr/config~ contains configuration variables
- ~sr/redis~ contains logic for configuring redis (via the config)
- ~sr/shutdownHandler~ contains a shutdown handler to manage internal tasks
- ~sr/setup~ fills databases with default data

**Packages for server logic**:
- ~sr/server~ contains logic for constructing ~http.Server~s
- ~sr/auth~ contains logic for looking up session data
- ~sr/session~ contains logic for cached per-request session data
- ~sr/routes~ contains the web API
- ~sr/task~ contains administrative and debugging tasks

**Packages for game logic**:
- ~sr/id~ contains identifiers and generators used for most objects
- ~sr/game~ contains game-specific data
- ~sr/player~ contains player-specific data
- ~sr/roll~ contains utilities for generating rolls and interpreting their results
- ~sr/update~ provides ~Update~s, or packets sent to players when data changes

** Systems overview
