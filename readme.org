* Shadowroller Server

This repository contains the backend code for running the server.

** You can run this yourself!

The backend exposes itself at ~0.0.0.0:3001~, which include devices in your LAN.
This allows your phone to connect! I'm working on a setting for just using localhost.

*** Run Docker

There's a ~Dockerfile~ and ~docker-compose.yml~ included to run the project with Docker.
This allows you to run with no dependencies.
~sudo docker-compose up~ starts the backend and redis.

*** Run locally

You will need:
- Redis
- Go

All you need to do right now is to run 3 commands:

- ~redis-server --port 6379~ starts Redis. It's only going to print things if it errors.
- ~go run main/main.go~ starts the backend and exposes ~0.0.0.0:3001~

*** Environments

There are three environments set up by switches in ~config/config.go~.
- *Production* uses HTTPS with Let's Encrypt.
- *Development* runs on ~localhost~ only without HTTPS.
- *Staging* (planned) is Development, but it uses HTTPS with self-signed certs.

Generally, code uses ~config.IsProduction~ unless it's setting up HTTPS.

*** Config Vars

Generally, the app is able to

The values used in configuration and deployment for https://snirkimmington.github.io/shadowroller
are intentionally kept secret.

* Project Structure

** Webserver
- ~server.go~ builds out the ~net/http~ server and covers TLS/CORS setup
- ~handlers.go~ response wrappers/middleware
- ~auth.go~ handles authorization of players
- ~config/config.go~ contains static config values and their defaults
- ~main/main.go~ assembles the webservers and runs them
- ~roll.go~ rolls dice

** Endpoints
- ~routes.go~ contains the main router that registers endpoints for now
- ~game.go~ contains endpoints and code for running games

** Infrastructure
- ~Dockerfile~ builds a ~reflex~ runner for development
- ~docker-compose.yml~ runs the app with redis on ~localhost:3001~
-

* Credits

Let's Encrypt TLS server inspired by: https://blog.kowalczyk.info/article/Jl3G/https-for-free-in-go-with-little-help-of-lets-encrypt.html

Gist: https://github.com/kjk/go-cookbook/blob/master/free-ssl-certificates/main.go

TLS hardening options copied from: https://blog.cloudflare.com/exposing-go-on-the-internet/
