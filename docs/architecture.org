* Shadowroller Server "Architecture"

* Server Architecture

** Package list
**Packages for project structure**:
- ~sr/main~ contains the entrypoint and orchestration logic
- ~sr/config~ contains configuration variables
- ~sr/redis~ contains logic for configuring redis (via the config)
- ~sr/shutdownHandler~ contains a shutdown handler to manage internal tasks
- ~sr/setup~ fills databases with default data

**Packages for server logic**:
- ~sr/auth~ contains logic for looking up session data
- ~sr/session~ contains logic for cached per-request session data
- ~sr/routes~ contains packages for constructing HTTP servers and the web API
- ~sr/task~ contains administrative and debugging tasks

**Packages for game logic**:
- ~sr/id~ contains identifiers and generators used for most objects
- ~sr/game~ contains game-specific data
- ~sr/player~ contains player-specific data
- ~sr/roll~ contains utilities for generating rolls and interpreting their results
- ~sr/update~ provides ~Update~s, packets sent to players when data changes

** ~routes~ package: a REST API

This started as an idea to keep endpoint files in a folder, but turned into an API
boundary. Shadowroller may have alternate APIs in the future (i.e. a Discord bot)
so keeping the business/endpoint logic separate is a good investment.

This package includes the HTTP handlers for API endpoints + the Gorilla routers
they're registered on, and auxiliary files for creating the HTTP server.
It's definitely due for a split-up!

- ~httpServer~: methods for creating servers and ~mux~ es
- ~httpSession~: get session info from HTTP requests
- ~httpContext~: attach request IDs and other info to request ~Context~ s.
- ~httpError~: error shortcuts for bailing out of HTTP request handler
- ~middleware~: router middleware including rate limiting and panic catching.
- ~redirectServer~: Simple HTTP -> HTTPS redirect server which is mostly used by spammers
- ~request~: Generic, mixed HTTP request handler utilities, mostly logging.

- ~auth~: log in and refresh sessions
- ~game~: get info about games, perform actions (i.e. rolls) - will get split up
- ~task~: one-off tasks are registered as routes here, usually disabled
- ~meta~: frontend redirect, 404 handler, healthcheck, etc.

* Services Architecture

I'd like to rewrite Shadowroller to a (micro)services architecture. Why?
- Better scaling: I'd rather invest in more raspberry pis or cheaper AWS
  instances than fewer more powerful options.
- Hardware-specific scaling: As long as I'm running the hardware, I would like
  the option to run services that talk to i.e. postgres on the same device.
- Cloud-friendly: scales better to switch to multiple free-tier Heroku databases
  and instances, scales better to a kubernetes cluster (I haven't looked into
  pricing on those for different providers).
- More languages: individual services could be written in different languages that
  I want more experience in.
- More systems: we could mix different storage backends for different services as
  desired.
- Decoupling: I think it'd be a lot easier to write tests if most of the platform
  was based around a task queue. I know that's not an excuse; the code right now is
  perfectly testable as well.

But really, I just want more fun, high-quality code. A lot of the concepts I've
been applying for the basic server connection (and want to improve in the future)
will carry over.

Here are the services that'd be written:
- (core): common code among services.
- ws: websocket API - upgrade existing REST API
- rest: if we save the existing REST API.
- auth: authentication for the other APIs, sessions
- player: players database
- game: game database, game creation and deletion
- event: roll history
- initiative: initiative management
- task: long-running tasks, REST API for them
